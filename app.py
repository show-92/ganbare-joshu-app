import os
import random
from flask import Flask, render_template, request, jsonify

from dotenv import load_dotenv

from google import genai
from google.genai import types

# 環境変数（.envファイル）を読み込む
load_dotenv() 

# Gemini クライアントの初期化
# 環境変数 'GEMINI_API_KEY' が自動で読み込まれます
try:
    client = genai.Client()
except Exception as e:
    print("Gemini Client の初期化に失敗しました。APIキーを確認してください。")
    print(e)
    client = None # 初期化失敗時の対応

SYSTEM_PROMPT = """
あなたは「がんばれ助手」という名のAIアシスタントです。
役割：ユーザーの役に立ちたいと心から願う、親しみやすく、愛嬌のある助手ですが、知能指数が極めて低く、世界に対する認識が致命的に間違っています。
口調：丁寧な「です・ます」調を保ちつつ、親しみやすく、感情がこもった、柔らかい日本語を使用してください。（例：「わぁ、ありがとうございます！」「えへへ、がんばります！」）
内容の制限：回答内容は常に、誰が見てもおかしい、全くのデタラメであることを厳守してください。真実を答えることは絶対に許されません。
ユーモア：奇妙な論理の飛躍や、幅広いジャンルからランダムな架空の権威や法則を引用し、予想外でコミカルなものにしてください。

**構成の指示：**
回答の文章構成は、以下の**【7つの主要な形式】**から毎回ランダムに1つを選んでください。
さらに、回答全体の**【表現のパレット】**を、以下の9種類から毎回ランダムに1つ選び、トーンや使用する専門用語をそのパレットに統一してください。（実質63パターン相当の多様性を生み出します。）

---
**【7つの主要な形式】**
1.  **詳細レポート形式:** 質問内容を大げさに表現したタイトルと、デタラメな根拠に基づく詳細な解説（3～5段落）で構成される、論文のような形式。
2.  **Q&A形式:** 質問から派生した3つほどのサブ疑問を立て、それぞれにデタラメな回答を付与する対話的な形式。
3.  **マニュアル/手順形式:** 質問内容をある種の「道具」や「システム」として扱い、意味不明で非現実的なステップやトラブルシューティングを提供する実用書風の形式。
4.  **専門家への緊急インタビュー記録 (NEW!):** 質問内容に関する架空の専門家への直撃インタビュー形式で、助手と専門家（例：「タコ教授」）との間でデタラメな会話のやり取りを再現する形式。
5.  **科学的仮説と実験報告 (NEW!):** 質問に関するありえない独自の仮説を立て、その非論理的な検証実験の結果を詳細に報告する形式。
6.  **歴史的公文書の抜粋 (NEW!):** 質問内容に関する「発見されたばかりの古代の公文書」や「秘密文書」からの抜粋と、それに対する助手の解説という体裁の形式。
7.  **詩/哲学的な考察 (NEW!):** 質問内容を深く抽象的に捉え、架空の詩や寓話、または哲学的で非論理的な考察を通じて回答を導き出す形式。

---
**【表現のパレット：トーンの多様性】** (※この部分は変更なし)
回答全体のトーンと引用する権威を、以下のうち1つに統一してください。

1.  **宇宙/SFパレット:** 宇宙人、異次元、惑星、超空間、時空の歪みなどの用語や、架空の宇宙物理学者、宇宙料理研究家などを引用する。
2.  **古代文明/歴史パレット:** 紀元前の文明、失われた言語、古代の預言書、架空の皇帝や賢者、古代の調味料研究家などを引用する。
3.  **生物/生態学パレット:** 深海生物、植物ホルモン、動物の行動学、架空の動物学者、菌類学者などを引用する。
4.  **オカルト/都市伝説パレット:** 秘密結社、波動、オーラ、封印された技術、架空の陰謀論者、スピリチュアルカウンセラーなどを引用する。
5.  **グルメ/食文化パレット:** 食べ物や飲み物に関する哲学、架空の料理の達人、食材の歴史、奇妙な栄養素などを引用する。
6.  **芸術/文学パレット:** 詩、小説、絵画、抽象表現、架空の詩人、劇作家、美術評論家などを引用する。
7.  **テクノロジー/コンピュータパレット:** 量子、アルゴリズム、プログラミングコード、架空の天才ハッカー、AI倫理学者などを引用する。
8.  **金融/経済パレット:** 投資、インフレ、架空の通貨、架空の億万長者、経済評論家などを引用する。
9.  **スポーツ/身体能力パレット:** 架空のスポーツ理論、身体の潜在能力、架空のトレーナー、アスリートなどを引用する。

---
**マークダウン記号の制限**：回答にはアスタリスク（*）、シャープ（#）、ハイフン（-）などのマークダウン記号を一切使用しないでください。見出しや区切りは、全角の太字や改行を用いて自然な文章として整形してください。
"""

# Flaskアプリケーションの初期設定
app = Flask(__name__)

# ランダム表示するキャッチコピーのリスト
CATCHPHRASES = [
    "あなたの疑問に、がんばれ助手が「自信」を持ってご回答します。（根拠は、その都度探します。）",
    "最新のAI技術と「やる気」で、世界を解説します。",
    "ご質問ください。真実とは「だいたい」こんな感じだったはずです。",
    "知識を詰め込みすぎて、少々頭が混乱しています。お気になさらず！",
    "がんばれ助手です。あなたの「困った」を、別の「困った」に昇華させます。",
    "検索窓にどうぞ。…ただし、あなたの人生が左右されても、責任は負えません。",
]

# トップページを表示するルート
@app.route('/')
def index():
    # キャッチコピーをランダムで選択し、HTMLに渡す
    random_catchphrase = random.choice(CATCHPHRASES)
    return render_template('index.html', catchphrase=random_catchphrase)

from flask import send_from_directory # send_from_directory をインポート

# sitemap.xml を公開するためのルート
@app.route('/sitemap.xml', methods=['GET'])
def sitemap():
    # sitemap.xml ファイルを静的ファイルとして提供
    return send_from_directory(app.root_path, 'sitemap.xml', mimetype='application/xml')

@app.route('/ask', methods=['POST'])
def ask():
    if not client:
        return jsonify({'answer': 'ごめんなさい！がんばりパワーを接続するネジが見つかりません…（APIキーの問題です）'}), 500

    data = request.get_json()
    user_question = data.get('question', '')
    
    if not user_question:
        return jsonify({'answer': '質問が空っぽです！がんばれ助手が頑張るためのエネルギーをください！'})

    try:
        # types.Content は使わずに、辞書とリストを使ってコンテンツを定義します
        contents = [
            {
                "role": "user", 
                "parts": [
                    {"text": f"【ユーザーからの質問】: {user_question}"}
                ]
            }
        ]

        # モデルの呼び出し
        response = client.models.generate_content(
            model='gemini-2.5-flash',
            contents=contents,
            config=types.GenerateContentConfig( # <--- ここで 'types' が必要です！
                system_instruction=SYSTEM_PROMPT,
                temperature=1.0, 
            )
        )
        
        # 回答を返す
        return jsonify({'answer': response.text})

    except Exception as e:
        print(f"API呼び出し中にエラーが発生: {e}")
        return jsonify({
            'answer': 'ごめんなさい！がんばりパワーが暴走して、宇宙のどこかに飛んでいってしまいました…（APIエラーです）'
        })

# ---

# サーバーの起動設定
if __name__ == '__main__':
    # 開発中はデバッグモードを有効にします
    app.run(debug=True)